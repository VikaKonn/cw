import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import seaborn as sns
import matplotlib.pyplot as plt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    return pd.read_csv("company_financial_data.csv")

data = load_data()

# –°–∞–π–¥–±–∞—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    years = sorted(data['–ì–æ–¥'].unique())
    year_range = st.slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
        min_value=min(years),
        max_value=2025,
        value=(min(years), 2025)
    )
    
    # –í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
    subdivisions = sorted(data['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'].unique())
    selected_subdivisions = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
        subdivisions,
        default=subdivisions[:5]
    )
    
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    metrics = [
        '–í—ã—Ä—É—á–∫–∞', '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        '–ê–∫—Ç–∏–≤—ã', '–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏',
        '–î–æ–ª—è —Ä—ã–Ω–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂',
        '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤', '–î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞'
    ]
    selected_metrics = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        metrics,
        default=['–í—ã—Ä—É—á–∫–∞', '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å']
    )

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
filtered_data = data[
    (data['–ì–æ–¥'].between(year_range[0], year_range[1])) &
    (data['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'].isin(selected_subdivisions))
]

# –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4 = st.tabs(["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π", "–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"])

with tab1:
    st.header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.dataframe(filtered_data[selected_metrics].describe())
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    for metric in selected_metrics:
        fig = px.histogram(filtered_data, x=metric, title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {metric}")
        st.plotly_chart(fig, use_container_width=True)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
    corr_matrix = filtered_data[selected_metrics].corr()
    fig = px.imshow(corr_matrix, text_auto=True, aspect="auto")
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header("–ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π")
    
    # –¢–æ–ø –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø–æ –≤—ã—Ä—É—á–∫–µ
    st.subheader("–¢–æ–ø –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø–æ –≤—ã—Ä—É—á–∫–µ")
    top_revenue = filtered_data.groupby('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')['–í—ã—Ä—É—á–∫–∞'].mean().sort_values(ascending=False).head(10)
    fig = px.bar(top_revenue, title="–¢–æ–ø-10 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø–æ —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Ä—É—á–∫–µ")
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π")
    for metric in selected_metrics:
        fig = px.box(filtered_data, x='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', y=metric, title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {metric} –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º")
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑")
    
    # –¢—Ä–µ–Ω–¥—ã –ø–æ –≥–æ–¥–∞–º
    st.subheader("–¢—Ä–µ–Ω–¥—ã –ø–æ –≥–æ–¥–∞–º")
    yearly_data = filtered_data.groupby('–ì–æ–¥')[selected_metrics].mean().reset_index()
    fig = px.line(yearly_data, x='–ì–æ–¥', y=selected_metrics, title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ–¥–∞–º")
    st.plotly_chart(fig, use_container_width=True)
    
    # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
    st.subheader("–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º")
    monthly_data = filtered_data.groupby('–ú–µ—Å—è—Ü')[selected_metrics].mean().reset_index()
    fig = px.line(monthly_data, x='–ú–µ—Å—è—Ü', y=selected_metrics, title="–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
        ["–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å"]
    )
    
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    target_metric = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
        selected_metrics
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    forecast_years = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
        min_value=1,
        max_value=3,
        value=3
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        st.info("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        last_year = filtered_data['–ì–æ–¥'].max()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_years_list = [last_year + i + 1 for i in range(forecast_years)]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –≥–æ–¥–æ–≤–æ–π –ø—Ä–∏—Ä–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        yearly_means = filtered_data.groupby('–ì–æ–¥')[target_metric].mean()
        yearly_growth = yearly_means.pct_change().mean()
        
        # –ï—Å–ª–∏ —Ä–æ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É
        if yearly_growth < 0 or yearly_growth > 0.15:
            yearly_growth = 0.05  # 5% –≥–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        last_value = yearly_means.iloc[-1]
        forecast_values = []
        for i in range(forecast_years):
            next_value = last_value * (1 + yearly_growth)
            forecast_values.append(next_value)
            last_value = next_value
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        fig = go.Figure()
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        historical_years = filtered_data['–ì–æ–¥'].unique()
        historical_values = filtered_data.groupby('–ì–æ–¥')[target_metric].mean()
        
        fig.add_trace(go.Scatter(
            x=historical_years,
            y=historical_values,
            name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
            mode='lines+markers'
        ))
        
        fig.add_trace(go.Scatter(
            x=forecast_years_list,
            y=forecast_values,
            name='–ü—Ä–æ–≥–Ω–æ–∑',
            line=dict(dash='dash'),
            mode='lines+markers'
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        fig.update_layout(
            title=f"–ü—Ä–æ–≥–Ω–æ–∑ {target_metric} –Ω–∞ {forecast_years} –ª–µ—Ç",
            xaxis_title="–ì–æ–¥",
            yaxis_title=target_metric,
            showlegend=True,
            xaxis=dict(
                dtick=1,
                tickmode='linear'
            )
        )
        
        st.success("–ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤!")
        st.plotly_chart(fig, use_container_width=True)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("¬© 2025 –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏")
st.markdown("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: –ö–æ–Ω–æ–≤–∞–ª–æ–≤–∞ –í–∏–∫—Ç–æ—Ä–∏—è") 